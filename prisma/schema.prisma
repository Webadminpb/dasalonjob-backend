// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for Role
enum Role {
  ADMIN
  USER
  SUPER_ADMIN
  PARTNER
  AGENCY
}

enum Gender {
  Male
  Female
  Everyone
}

enum MartialStatus {
  Single
  Married
}

enum JoiningAvailability {
  OneWeek
  TwoWeek
  ThreeWeek
  FourWeek
  OneMonth
  TwoMonth
  ThreeMonth
  AnyTime 
}

enum JobBasicInfoProfileType {
  HairStyling
  NailsSpecialist
  Message
  Medicure
}

enum JobProfile {
  Barber
  Stylist
  Technician
}

enum HighestEducation {
  Degree
  Diploma
  Certificate
}

// enum Language {
//   Hindi
//   English
//   Japanese
// }

enum Proficiency {
  Native
  Conversational
  Fluent
  Proficient
  Basic
  None
}

enum BusinessType {
  HairSalon
  NailSalon
  AesthethicAndMedicalClinic
  BodyTreatmentSPA
  SPAService
  TattoStudio
  FacialAndSkinCareCenter
  WaxingAndHairRemoval
  MakeUpStudio
  MessageParlor
  EyeleshAndEyebrowStudio
}

enum AdditionalServices {
  AdultsOnly
  EcoFriendlyPractices
  GiftCard
  Hygiene
  KidFriendly
  KidsOnly
  LoyaltyProgram
  MagazinesReadingMaterial
  NearBusStop
  NearCityCenter
  NearMetro
  NearShoppingMall
  Parking
  PaymentFlexibleOptions
  PetFriendly
  PrivateTreatmentRooms
  ProductNatural
  ProductVegan
  ProductOrganic
  RefreshmentFree
  Sauna
  Toilet
  RelaxationRooms
  WaitingArea
  Restaurant
  Wifi
  SteamRooms
  WheelchairAccessible
  Recycle
  AirConditioning
  AirPurifier
  ChangingRooms
}

enum JobType {
  FullTime
  PartTime
}

enum CourseType {
  Online
  Offline
}

enum CoursePlatform {
  Zoom
  GoogleMeet
}

// Benefits
enum Incentive {
  HealthInsurance
  PaidTimeOff
  FlexibleSchedule
  EmployeeDiscount
  Accomodation
  ProfessionalDev
}

enum TotalOpening {
  One
  Two
  Three 
  Four
}

enum Plan {
  ONE_MONTH
  SIX_MONTH
  YEARLY
}

enum JobPostStatus {
  Approved
  Canceled
  Pending
}

enum CourseStatus {
  Approved
  Canceled
}

enum JobApplicationStatus {
  Applied
  Shortlisted
  Accepted
  Rejected
}

enum CountryStatus {
  ACTIVE
  INACTIVE
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

enum Amenities {
  Facial
  Lotion 
  Wifi 
  Towel
  Slipper 
  Custom
}




type Days {
  monday Day?
  tuesday Day?
  wednesday Day?
  thursday Day?
  friday  Day?
  saturday  Day?
  sunday  Day?
}

type Day {
  isActive Boolean @default(false)
  from DateTime?
  to DateTime?
  offPeakFrom DateTime?
  offPeakTo DateTime?

}

type SalaryRange {
  start Int @default(0)
  end Int @default(0)
}

type Content {
  service HighestEducation
  list String
}


// for User Partner
model Auth {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  email                       String   @unique
  password                    String
  role                        Role     @default(USER)
  phone                       String
  isPhoneVerified             Boolean  @default(false)
  isEmailVerified             Boolean  @default(false)
  phoneVerificationCode       String?
  emailVerificationCode       String?
  phoneVerificationCodeExpiry DateTime?
  emailVerificationCodeExpiry DateTime?
  isBlocked                   Boolean @default(false)
  isVerified                  Boolean @default(false)
  status                      AccountStatus @default(ACTIVE)

  countryId String? @db.ObjectId
  country Country? @relation(fields: [countryId], references: [id])

  profileImageId String? @db.ObjectId 
  profileImage File? @relation("ProfileImage", fields: [profileImageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  verificationFileId String[] @db.ObjectId 
  verificationFile File[] @relation("VerificationFile", fields: [verificationFileId], references: [id])


  basicDetails BasicDetails? 
  contactDetails ContactDetails?
  jobPreference JobPreference?
  // skills Skills[]
  PastWork PastWork?
  partnerPersonalData PartnerPersonalData?
  experiences Experience[]
  educations Education[]
  pastExperiences PastExperience[]
  languages UserLanguage[]
  certificates Certificate[]
  files File[]

  venueDetails VenueDetails[]
  salonDetails SalonDetails[]
  jobBasicInfo JobBasicInfo[]
  jobDescription JobDescription[]
  venueMainBusinessType VenueMainBusinessType[]
  venueMainBusinessDays VenueMainBusinessDays[]
  venueMainBusinessServices VenueMainBusinessServices[]
  jobQualification JobQualification[]
  jobBenefits JobBenefits[]
  venueAmenities VenueAmenities[]
  venueWorkStation VenueWorkStation[]
  partnerVenues PartnerVenue[]
  partnerCourses PartnerCourse[]

  courseDetails CourseDetails[]
  courseContent CourseContent[]
  courseAcademy CourseAcademy[]
  courseTypeAndLocation CourseTypeAndLocation[]
  CourseApplications CourseApplication[]

  agencyDetails AgencyDetails?
  agencyJobBasicInfo AgencyJobBasicInfo?
  

  agencyJobDescription AgencyJobDescription[]
  agencyJobQualification AgencyJobQualification?
  agencyJobBenefits AgencyJobBenefits?
  agencyPlan AgencyPlan?
  agencySalonRelation AgencySalonRelation[]
  agencyVenueDetails AgencyVenueDetails[]
  agencyPartnerSalons AgencyPartnerSalons[]
  agencyJobs AgencyJobPartner[]


  jobPost JobPost[]
  jobApplications JobApplication[]

  saveJobPosts SaveJobPost[]
  saveCourses SaveCourse[]
  partnerSocialLinks PartnerSocialLinks?

  applicantShortlistedMessages JobApplicationMessage[] @relation("ApplicantShortlistedMessages")
  partnerShortlistedMessages JobApplicationMessage[] @relation("PartnerShortlistedMessages")
  
  isEducation    Boolean?
  isProfessional Boolean?
  isExperience   Boolean?
  isPartner      Boolean?


  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  // @@map("auth") // Optional: Map this model to a table named `auth`
}

// for User
model BasicDetails {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // fullName  String
  firstName String?
  lastName String?

  gender    Gender 
  dob       DateTime

  userId    String @unique @db.ObjectId
  user      Auth   @relation(fields: [userId], references: [id])

  fileId String? @unique @db.ObjectId
  file File? @relation(fields: [fileId], references: [id])

  martialStatus MartialStatus? // optional
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

// for User
model ContactDetails {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  phoneCode   String?
  phoneNumber String?
  zipCode     String? //optional
  state       String? // optional
  city        String? // optional
  streetAddress String?

  longitude String? 
  latitude String?

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// for User Partner
model UserLanguage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  proficiency Proficiency @default(Basic)

  languageId String @db.ObjectId
  language Language @relation(fields: [languageId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Language {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  name    String
  // proficiency Proficiency @default(Basic)

  // userId      String @db.ObjectId
  // user        Auth   @relation(fields: [userId], references: [id])

  jobQualificationIds String[] @db.ObjectId
  jobQualifications JobQualification[] @relation(fields: [jobQualificationIds], references: [id])

  userLanguages UserLanguage[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// for User Partner
model Skills {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  // jobPostIds String[] @db.ObjectId
  // jobPosts JobPost[] @relation(fields: [jobPostIds], references: [id])


  jobQualificationIds String[] @db.ObjectId
  JobQualifications JobQualification[] @relation(fields: [jobQualificationIds], references: [id])

  jobPreference JobPreference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User 
model JobPreference {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  locations String[]
  joining JoiningAvailability
  salary SalaryRange 

  skillsIds String @db.ObjectId
  skills Skills @relation(fields: [skillsIds], references: [id])



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User
model Experience {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profile JobProfile
  location String
  longitude String
  latitude String
  startDate DateTime
  endDate DateTime
  description String?

  userId      String  @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User
model PastWork {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  videoLink String[] 
  fileIds String[] @db.ObjectId
  files File[] @relation(fields: [fileIds], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// for User
model Education {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  education HighestEducation
  school String
  attended DateTime
  graduated DateTime



  userId      String @db.ObjectId
  user       Auth   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User
model PastExperience {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @db.ObjectId
  user       Auth   @relation(fields: [userId], references: [id])

  certificateName String
  certificateId String
  instituteName String
  // profile JobProfile
  // location String
  // longitude String
  // latitude String
  // startDate DateTime
  // endDate DateTime
  // description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User
model Certificate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  certificateName String
  certificateId String
  instituationName String
  description String?

  fileId String @db.ObjectId
  file File @relation(fields: [fileId], references: [id])

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// for User Partner
model File {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  publicId  String
  url       String
  format    String
  folder    String

  userId    String @db.ObjectId
  user      Auth @relation(fields: [userId], references: [id])

  pastWorkIds String[] @db.ObjectId
  pastWorks PastWork[] @relation(fields: [pastWorkIds], references: [id])

  venueDetailIds String[] @db.ObjectId
  venueDetails VenueDetails[] @relation(fields: [venueDetailIds], references: [id])

  salonDetailsIds String[] @db.ObjectId
  salonDetails SalonDetails[] @relation(fields: [salonDetailsIds], references: [id])

  basicDetails BasicDetails?
  agencyDetails AgencyDetails?
  agencyVenueDetails AgencyVenueDetails?
  courseDetails CourseDetails[]
  certificates Certificate[]

  profileImageAuth Auth[] @relation("ProfileImage")

  verificationFileAuth Auth[] @relation("VerificationFile", fields: [verificationFileAuthId], references: [id])
  verificationFileAuthId String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for Partner
model SalonDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  businessName String
  ownerName String
  email String

  firstName String?
  lastName String?
  dob DateTime?
  gender Gender?

  phoneCode String
  phoneNumber String 

  isDasalonAccount Boolean?


  fileIds String[] @db.ObjectId
  files File[] @relation(fields: [fileIds], references: [id])

  userId String  @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partnerVenues PartnerVenue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for Partner
model VenueDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  email String
  phoneCode String
  phoneNumber String
  zipCode String
  city String
  streetAddress String
  gender Gender

  franchise String?

  latitude String?
  longitude String?

  fileIds String[] @db.ObjectId
  files File[] @relation(fields: [fileIds], references: [id])

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  businessType BusinessType[]

  partnerVenues PartnerVenue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VenueMainBusinessType {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  businessType BusinessType

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VenueMainBusinessDays {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  days Json
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partnerVenue PartnerVenue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VenueMainBusinessServices {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  services AdditionalServices[]

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobBasicInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String
  profile JobBasicInfoProfileType 
  jobType JobType
  totalOpening Int @default(1)
  gender Gender

  salaryRange SalaryRange
  deadline DateTime

  
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  venueId String? @db.ObjectId 
  venue PartnerVenue? @relation(fields: [venueId], references: [id])

  jobPost JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobDescription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  description String
  
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPost JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobQualification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  education HighestEducation
  minExperience Boolean
  certification Boolean
  isProfessional Boolean

  skillIds String[] @db.ObjectId
  skills Skills[] @relation(fields: [skillIds], references: [id])

  languageIds String[] @db.ObjectId
  languages Language[] @relation(fields: [languageIds], references: [id])

  
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPost JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model JobBenefits {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  benefits Incentive[]

  
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPost JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model JobPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  jobBasicInfoId String? @db.ObjectId
  jobBasicInfo JobBasicInfo? @relation(fields: [jobBasicInfoId], references: [id])

  jobBenefitsId String?  @db.ObjectId
  jobBenefits JobBenefits? @relation(fields: [jobBenefitsId], references: [id])

  jobQualificationId String? @db.ObjectId
  jobQualification JobQualification? @relation(fields: [jobQualificationId], references: [id])

  jobDescriptionId String?  @db.ObjectId
  jobDescription JobDescription? @relation(fields: [jobDescriptionId], references: [id])



  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  countryId String? @db.ObjectId
  country Country? @relation(fields: [countryId], references: [id])

  status JobPostStatus @default(Approved)
  isOpen Boolean @default(true) // false fullfilled ?

  jobApplications JobApplication[]
  saveJobPosts SaveJobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// Business

model AgencyDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  businessName String
  ownerName String
  email String

  phoneCode String
  phoneNumber String

  fileId String? @unique @db.ObjectId
  file File? @relation(fields: [fileId], references: [id])

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyVenueDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName String
  phoneCode String
  phoneNumber String
  email String
  gender Gender
  jobRole JobProfile

  fileId String? @unique @db.ObjectId
  file File? @relation(fields: [fileId], references: [id])

  userId String  @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyPartnerSalons {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partners    AgencySalonRelation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencySalonRelation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  agencyId  String   @db.ObjectId
  agency    AgencyPartnerSalons @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  userId   String   @db.ObjectId
  user     Auth @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model AgencyJobBasicInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String
  profile String
  jobType JobType
  totalOpening TotalOpening
  gender Gender

  salaryRange SalaryRange
  deadline DateTime

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partners AgencyJobPartner[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyJobPartner {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  agencyJobId String @db.ObjectId
  partnerId String @db.ObjectId

  agencyJob AgencyJobBasicInfo @relation(fields: [agencyJobId], references: [id])
  partner Auth @relation(fields: [partnerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agencyJobId, partnerId]) // Prevent duplicate entries
}

model AgencyJobDescription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  description String
  
  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyJobQualification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  education HighestEducation
  minExperience Boolean
  certification Boolean
  isProfessional Boolean

  
  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyJobBenefits {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  benefits Incentive[]

  
  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyPlan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  plan Plan

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Applicant Id
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPostId String @db.ObjectId
  jobPost JobPost @relation(fields: [jobPostId], references: [id])

  status JobApplicationStatus @default(Applied)

  message String?

  shortlisted JobApplicationMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobPostId]) 
}

model JobApplicationMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  applicantId String @db.ObjectId
  applicant Auth @relation("ApplicantShortlistedMessages", fields: [applicantId], references: [id])

  partnerId String @db.ObjectId
  partner Auth @relation("PartnerShortlistedMessages", fields: [partnerId], references: [id])

  jobApplicationId String @db.ObjectId
  jobApplication JobApplication @relation(fields: [jobApplicationId], references: [id])


  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaveJobPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // ApplicantId
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPostId String @db.ObjectId
  jobPost JobPost @relation(fields: [jobPostId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobPostId]) 
}

model PartnerSocialLinks {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  facebook String
  instagram String
  linkedin String
  website String

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name           String
  code           String
  currencyName   String
  currencySymbol String

  currencyCode      String @default("INR")
  pincodeLength     Int
  phoneNumberLength Int

  status CountryStatus @default(ACTIVE)

  auth Auth[]
  jobPosts JobPost[]
  courseTypeAndLocation CourseTypeAndLocation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VenueAmenities {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  amenities Amenities[]

  // partnerId
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partnerVenue PartnerVenue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model VenueWorkStation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partnerVenueIds String[] @db.ObjectId
  partnerVenues PartnerVenue[] @relation(fields: [partnerVenueIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartnerVenue {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  venueBasicDetailsId String @db.ObjectId 
  venueBasicDetails VenueDetails @relation(fields: [venueBasicDetailsId], references: [id])

  salonBasicDetailsId String @db.ObjectId
  salonBasicDetails SalonDetails @relation(fields: [salonBasicDetailsId], references: [id])

  venueAmenityIds String @db.ObjectId
  venueAmenities VenueAmenities @relation(fields: [venueAmenityIds], references: [id])

  venueWorkStationIds String[] @db.ObjectId
  venueWorkStations VenueWorkStation[] @relation(fields: [venueWorkStationIds], references: [id])

  venueMainBusinessDaysId String? @db.ObjectId
  venueMainBusinessDays VenueMainBusinessDays? @relation(fields: [venueMainBusinessDaysId], references: [id])

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  courseDetails CourseDetails[]
  courseAcademy CourseAcademy[]
  jobBasicInfo JobBasicInfo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartnerPersonalData {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String?
  lastName String?
  dob DateTime?
  gender Gender?

  userId String @db.ObjectId @unique
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartnerCourse {
  id String @id @default(auto()) @map("_id") @db.ObjectId

// partnerId
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  courseDetailsId String @db.ObjectId
  courseDetails CourseDetails @relation(fields: [courseDetailsId], references: [id])

  courseContentId String @db.ObjectId
  courseContent CourseContent @relation(fields: [courseContentId], references: [id])

  courseAcademyId String @db.ObjectId
  courseAcademy CourseAcademy @relation(fields: [courseAcademyId], references: [id])

  courseTypeAndLocationId String @db.ObjectId
  courseTypeAndLocation CourseTypeAndLocation @relation(fields: [courseTypeAndLocationId], references: [id])

  status CourseStatus @default(Approved)
  isOpen Boolean @default(true)

  saveCourses SaveCourse[]
  courseApplications CourseApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CourseDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  jobProfile JobProfile

  courseName String
  courseType String?

  startDate DateTime
  endDate DateTime

  price Float
  offerPrice Float

  isPlacement Boolean @default(false)

  // VenueId
  providerId String @db.ObjectId
  provider PartnerVenue @relation(fields: [providerId], references: [id])

  // fileId
  fileId String? @db.ObjectId
  file File? @relation(fields: [fileId], references: [id])

  // partnerId
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partnerCourses PartnerCourse[]



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseContent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content Content[]

  description String? 

  // partnerId
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

   partnerCourses PartnerCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseAcademy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // VenueId
  providerId String @db.ObjectId
  provider PartnerVenue @relation(fields: [providerId], references: [id])

  // partnerId
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

   partnerCourses PartnerCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseTypeAndLocation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  
  countryId String? @db.ObjectId
  country Country? @relation(fields: [countryId], references: [id])

  city String?
  state String?
  pincode String?
  address String?

  courseType CourseType 

  platform CoursePlatform?
  link String?

  // partnerId
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partnerCourses PartnerCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaveCourse {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // ApplicantId
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  courseId String @db.ObjectId
  course PartnerCourse @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId]) 
}

model CourseApplication {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  courseId String @db.ObjectId
  course PartnerCourse @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}











