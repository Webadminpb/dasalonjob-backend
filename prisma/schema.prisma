// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for Role
enum Role {
  ADMIN
  USER
  SUPER_ADMIN
  PARTNER
  AGENCY
}

enum Gender {
  Male
  Female
  NonBinary
}

enum MartialStatus {
  Single
  Married
}

enum JoiningAvailability {
  OneWeek
  TwoWeek
  ThreeWeek
  FourWeek
}

enum JobProfile {
  Barber
  Stylist
  Technician
}

enum HighestEducation {
  Degree
  Diploma
  Certificate
}

enum Langauge {
  Hindi
  English
  Japanese
}

enum Proficiency {
  Native
  Conversational
  Fluent
  Proficient
  Basic
  None
}



model Auth {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  email                       String   @unique
  password                    String
  role                        Role     @default(USER)
  phone                       String
  isPhoneVerified             Boolean  @default(false)
  isEmailVerified             Boolean  @default(false)
  phoneVerificationCode       String?
  emailVerificationCode       String?
  phoneVerificationCodeExpiry DateTime?
  emailVerificationCodeExpiry DateTime?



  basicDetails BasicDetails? 
  contactDetails ContactDetails?
  jobPreference JobPreference?
  skills Skills?
  PastWork PastWork?
  experiences Experience[]
  educations Education[]
  pastExperiences PastExperience[]
  langauges Langauges[]
  certificates Certificate[]

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  // @@map("auth") // Optional: Map this model to a table named `auth`
}

model BasicDetails {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  gender    Gender 
  dob       DateTime

  userId    String @unique @db.ObjectId
  user      Auth   @relation(fields: [userId], references: [id])
  maritalStatus MartialStatus
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model ContactDetails {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  phoneCode   String
  phoneNumber String
  zipCode     String
  state       String
  city        String
  streetAddress String

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Langauges {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  langauge    Langauge
  proficiency Proficiency

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skills {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  skills String[] 

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPreference {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  locations String[]
  joining JoiningAvailability
  salary String


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profile JobProfile
  location String
  startDate DateTime
  endDate DateTime
  description String?

  isExperience   Boolean?


  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PastWork {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  videoLink String[] 
  // file
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Education {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  education HighestEducation
  school String
  attended DateTime
  graduated DateTime

  isEducation    Boolean?


  userId      String @db.ObjectId
  user       Auth   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PastExperience {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @db.ObjectId
  user       Auth   @relation(fields: [userId], references: [id])

  certificateName String
  certificateId String
  instituteName String
  description String?

  // files

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  certificateName String
  certificateId String
  instituationName String
  description String?

  isProfessional Boolean?


  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model File {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url String
  key String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

