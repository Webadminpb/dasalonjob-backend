// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for Role
enum Role {
  ADMIN
  USER
  SUPER_ADMIN
  PARTNER
  AGENCY
}

enum Gender {
  Male
  Female
  NonBinary
}

enum MartialStatus {
  Single
  Married
}

enum JoiningAvailability {
  OneWeek
  TwoWeek
  ThreeWeek
  FourWeek
}

enum JobBasicInfoProfileType {
  HairStyling
  NailsSpecialist
  Message
  Medicure
}

enum JobProfile {
  Barber
  Stylist
  Technician
}

enum HighestEducation {
  Degree
  Diploma
  Certificate
}

enum Language {
  Hindi
  English
  Japanese
}

enum Proficiency {
  Native
  Conversational
  Fluent
  Proficient
  Basic
  None
}

enum BusinessType {
  HairSalon
  NailSalon
  AesthethicAndMedicalClinic
  BodyTreatmentSPA
  SPAService
  TattoStudio
  FacialAndSkinCareCenter
  WaxingAndHairRemoval
  MakeUpStudio
  MessageParlor
  EyeleshAndEyebrowStudio
}

enum AdditionalServices {
  AdultsOnly
  EcoFriendlyPractices
  GiftCard
  Hygiene
  KidFriendly
  KidsOnly
  LoyaltyProgram
  MagazinesReadingMaterial
  NearBusStop
  NearCityCenter
  NearMetro
  NearShoppingMall
  Parking
  PaymentFlexibleOptions
  PetFriendly
  PrivateTreatmentRooms
  ProductNatural
  ProductVegan
  ProductOrganic
  RefreshmentFree
  Sauna
  Toilet
  RelaxationRooms
  WaitingArea
  Restaurant
  Wifi
  SteamRooms
  WheelchairAccessible
  Recycle
  AirConditioning
  AirPurifier
  ChangingRooms
}

enum JobType {
  FullTime
  PartTime
}

// Benefits
enum Incentive {
  HealthInsurance
  PaidTimeOff
  FlexibleSchedule
  EmployeeDiscount
  Accomodation
  ProfessionalDev
}

enum TotalOpening {
  One
  Two
  Three 
  Four
}

enum Plan {
  ONE_MONTH
  SIX_MONTH
  YEARLY
}

enum JobPostStatus {
  Approved
  Canceled
  Pending
}

enum JobApplicationStatus {
  Applied
  Shortlisted
  Accepted
  Rejected
}


type Days {
  monday Boolean @default(false)
  tuesday Boolean @default(false)
  wednesday Boolean @default(false)
  thursday Boolean @default(false)
  friday  Boolean @default(false)
  saturday  Boolean @default(false)
  sunday  Boolean @default(false)
}

type SalaryRange {
  start Int @default(0)
  end Int @default(0)
}


// for User Partner
model Auth {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  email                       String   @unique
  password                    String
  role                        Role     @default(USER)
  phone                       String
  isPhoneVerified             Boolean  @default(false)
  isEmailVerified             Boolean  @default(false)
  phoneVerificationCode       String?
  emailVerificationCode       String?
  phoneVerificationCodeExpiry DateTime?
  emailVerificationCodeExpiry DateTime?



  basicDetails BasicDetails? 
  contactDetails ContactDetails?
  jobPreference JobPreference?
  skills Skills[]
  PastWork PastWork?
  experiences Experience[]
  educations Education[]
  pastExperiences PastExperience[]
  languages Languages[]
  certificates Certificate[]
  files File[]

  venueDetails VenueDetails?
  salonDetails SalonDetails?
  jobBasicInfo JobBasicInfo[]
  jobDescription JobDescription[]
  venueMainBusinessType VenueMainBusinessType?
  venueMainBusinessDays VenueMainBusinessDays?
  venueMainBusinessServices VenueMainBusinessServices?
  jobQualification JobQualification[]
  jobBenefits JobBenefits[]

  agencyDetails AgencyDetails?
  agencyJobBasicInfo AgencyJobBasicInfo?
  

  agencyJobDescription AgencyJobDescription[]
  agencyJobQualification AgencyJobQualification?
  agencyJobBenefits AgencyJobBenefits?
  agencyPlan AgencyPlan?
  agencySalonRelation AgencySalonRelation[]
  agencyVenueDetails AgencyVenueDetails[]
  agencyPartnerSalons AgencyPartnerSalons[]
  agencyJobs AgencyJobPartner[]


  jobPost JobPost[]
  jobApplications JobApplication[]
  
  isEducation    Boolean?
  isProfessional Boolean?
  isExperience   Boolean?
  isPartner      Boolean?


  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  // @@map("auth") // Optional: Map this model to a table named `auth`
}

// for User
model BasicDetails {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  gender    Gender 
  dob       DateTime

  userId    String @unique @db.ObjectId
  user      Auth   @relation(fields: [userId], references: [id])

  fileId String? @unique @db.ObjectId
  file File? @relation(fields: [fileId], references: [id])

  martialStatus MartialStatus
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

// for User
model ContactDetails {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  phoneCode   String
  phoneNumber String
  zipCode     String
  state       String
  city        String
  streetAddress String

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// for User Partner
model Languages {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  language    Language
  proficiency Proficiency @default(Basic)

  userId      String @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  jobPostIds String[] @db.ObjectId
  jobPosts JobPost[] @relation(fields: [jobPostIds], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// for User Partner
model Skills {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  skills String[] 

  userId      String @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  jobPost JobPost[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User 
model JobPreference {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  locations String[]
  joining JoiningAvailability
  salary String


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User
model Experience {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profile JobProfile
  location String
  startDate DateTime
  endDate DateTime
  description String?



  userId      String  @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User
model PastWork {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @unique @db.ObjectId
  user        Auth   @relation(fields: [userId], references: [id])

  videoLink String[] 
  fileIds String[] @db.ObjectId
  files File[] @relation(fields: [fileIds], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// for User
model Education {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  education HighestEducation
  school String
  attended DateTime
  graduated DateTime



  userId      String @db.ObjectId
  user       Auth   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User
model PastExperience {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String @db.ObjectId
  user       Auth   @relation(fields: [userId], references: [id])

  certificateName String
  certificateId String
  instituteName String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for User
model Certificate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  certificateName String
  certificateId String
  instituationName String
  description String?



  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// for User Partner
model File {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  publicId  String
  url       String
  format    String
  folder    String

  userId    String @db.ObjectId
  user      Auth @relation(fields: [userId], references: [id])

  pastWorkIds String[] @db.ObjectId
  pastWorks PastWork[] @relation(fields: [pastWorkIds], references: [id])

  venueDetailIds String[] @db.ObjectId
  venueDetails VenueDetails[] @relation(fields: [venueDetailIds], references: [id])

  basicDetails BasicDetails?
  agencyDetails AgencyDetails?
  agencyVenueDetails AgencyVenueDetails?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for Partner
model SalonDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  businessName String
  ownerName String
  email String

  phoneCode String
  phoneNumber String 

  isDasalonAccount Boolean?

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// for Partner
model VenueDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  email String
  phoneCode String
  phoneNumber String
  zipCode String
  city String
  streetAddress String
  gender Gender

  fileIds String[] @db.ObjectId
  files File[] @relation(fields: [fileIds], references: [id])

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VenueMainBusinessType {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  businessType BusinessType

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VenueMainBusinessDays {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  days Days
  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VenueMainBusinessServices {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  services AdditionalServices[]

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobBasicInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String
  profile JobBasicInfoProfileType 
  jobType JobType
  totalOpening Int @default(1)
  gender Gender

  salaryRange SalaryRange
  deadline DateTime

  
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPost JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobDescription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  description String
  
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPost JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobQualification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  education HighestEducation
  minExperience Boolean
  certification Boolean
  isProfessional Boolean

  
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPost JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model JobBenefits {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  benefits Incentive[]

  
  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPost JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model JobPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  jobBasicInfoId String? @db.ObjectId
  jobBasicInfo JobBasicInfo? @relation(fields: [jobBasicInfoId], references: [id])

  jobBenefitsId String?  @db.ObjectId
  jobBenefits JobBenefits? @relation(fields: [jobBenefitsId], references: [id])

  jobQualificationId String? @db.ObjectId
  jobQualification JobQualification? @relation(fields: [jobQualificationId], references: [id])

  jobDescriptionId String?  @db.ObjectId
  jobDescription JobDescription? @relation(fields: [jobDescriptionId], references: [id])

  skillId String? @db.ObjectId
  skills Skills? @relation(fields: [skillId], references: [id])

  languageIds String[] @db.ObjectId
  languages Languages[] @relation(fields: [languageIds], references: [id])

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  status JobPostStatus @default(Approved)
  isOpen Boolean @default(true)

  jobApplications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// Business

model AgencyDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  businessName String
  ownerName String
  email String

  phoneCode String
  phoneNumber String

  fileId String? @unique @db.ObjectId
  file File? @relation(fields: [fileId], references: [id])

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyVenueDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName String
  phoneCode String
  phoneNumber String
  email String
  gender Gender
  jobRole JobProfile

  fileId String? @unique @db.ObjectId
  file File? @relation(fields: [fileId], references: [id])

  userId String  @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyPartnerSalons {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partners    AgencySalonRelation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencySalonRelation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  agencyId  String   @db.ObjectId
  agency    AgencyPartnerSalons @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  userId   String   @db.ObjectId
  user     Auth @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model AgencyJobBasicInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String
  profile String
  jobType JobType
  totalOpening TotalOpening
  gender Gender

  salaryRange SalaryRange
  deadline DateTime

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  partners AgencyJobPartner[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyJobPartner {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  agencyJobId String @db.ObjectId
  partnerId String @db.ObjectId

  agencyJob AgencyJobBasicInfo @relation(fields: [agencyJobId], references: [id])
  partner Auth @relation(fields: [partnerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agencyJobId, partnerId]) // Prevent duplicate entries
}

model AgencyJobDescription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  description String
  
  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyJobQualification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  education HighestEducation
  minExperience Boolean
  certification Boolean
  isProfessional Boolean

  
  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyJobBenefits {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  benefits Incentive[]

  
  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgencyPlan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  plan Plan

  userId String @unique @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user Auth @relation(fields: [userId], references: [id])

  jobPostId String @db.ObjectId
  jobPost JobPost @relation(fields: [jobPostId], references: [id])

  status JobApplicationStatus @default(Applied)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobPostId]) 
}









